@page "/Adults"
@using AdultsClient.Models
@using AdultsClient.Data
@inject IAdultsService AdultData

<h3>Adults</h3>
    <p>Filter by Id: 
        <input type="number" @oninput="@((arg)=>FilterByAdultId(arg))" style="width: 50px"/>
    </p>
    <p>
        Filter by hair color:
        <select class="form-control selectpicker" @onchange="@((arg) => FilterByHairColor(arg))" style="width: 100px">
            <option>Blond</option>
            <option>Black</option>
            <option>Leverpostej</option>
            <option>White</option>
            <option>Brown</option>
        </select>
    </p>
@if (adultsToShow == null)
{
    <p>
        <em>Loading..</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>There are no adults in this list. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
            <th>Sex</th>
            <th>Height</th>
            <th>Weight</th>
            <th>Eye Color</th>
            <th>Hair Color</th>
            <th>Job</th>
            <th>Salary</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Adult item in adultsToShow) 
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Age</td>
                <td>@item.Sex</td>
                <td>@item.Height</td>
                <td>@item.Weight</td>
                <td>@item.EyeColor</td>
                <td>@item.HairColor</td>
                <td>@item.Job.JobTitle</td>
                <td>@item.Job.Salary</td>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color: red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adults;
    private IList<Adult> adultsToShow;

    private int? filterById;
    private string? filterByHairColor;

    private void FilterByAdultId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        ExecuteFilter();
    }

    private void FilterByHairColor(ChangeEventArgs args)
    {
        filterByHairColor = null;
        try
        {
            filterByHairColor = args.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adults.Where(t =>
            (filterById != null && t.Id == filterById || filterById == null) &&
            (filterByHairColor != null && t.HairColor == filterByHairColor || filterByHairColor == null)).ToList();
    }
    protected override async Task OnInitializedAsync()
    {
        adults = await AdultData.GetAdultsAsync();
        adultsToShow = adults;
        foreach (Adult adult in adults)
        {
            Console.WriteLine(adult.FirstName);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        adults = await AdultData.GetAdultsAsync();
     
    }

    private async Task RemoveAdult(int AdultId)
    {
        Adult adultToRemove = adultsToShow.First(t => t.Id == AdultId);
        try
        {
            await AdultData.RemoveAdultAsync(AdultId);
            adults.Remove(adultToRemove);
            adultsToShow.Remove(adultToRemove);
            //Console.WriteLine(adultsToShow[adultsToShow.Count-1].FirstName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}